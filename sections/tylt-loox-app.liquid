{% schema %}
{
  "name": "TYLT - Loox Custom",
  "settings": [
    {
      "type": "text",
      "id": "csv_url",
      "label": "URL du fichier CSV",
      "default": "https://cdn.shopify.com/s/files/..."
    },
    {
      "type": "text",
      "id": "csv_version",
      "label": "Version du CSV",
      "default": "v1"
    },
    {
      "type": "range",
      "id": "slides_desktop",
      "label": "Nombre de slides sur desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "slides_mobile",
      "label": "Nombre de slides sur mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 1
    },
    {
      "type": "range",
      "id": "max_reviews",
      "label": "Nombre maximum de reviews Ã  afficher",
      "min": 1,
      "max": 50,
      "step": 1,
      "default": 10
    },
    {
      "type": "checkbox",
      "id": "show_all",
      "label": "Afficher toutes les reviews actives",
      "default": false
    },
    {
      "type": "text",
      "id": "access_token",
      "label": "Access Token"
    },
    {
      "type": "text",
      "id": "shop_domain",
      "label": "Domaine de la boutique (ex: votre-boutique.myshopify.com)",
      "default": "paiheme-studio.myshopify.com"
    }
  ],
  "presets": [
    {
      "name": "TYLT - Loox Custom"
    }
  ]
}
{% endschema %}

<section class="review-slider-section">
  <!-- Preloader -->
  <div class="preloader">
    <img src="{{ 'spinner.gif' | asset_url }}" alt="Chargement...">
    <p>Chargement des avis...</p>
  </div>

  <!-- Slider -->
  <span class="prev"><</span>
  <div class="review-slider slick-slider"></div>
  <span class="next">></span>
</section>

<script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const csvUrl = "{{ section.settings.csv_url }}";
  const csvVersion = "{{ section.settings.csv_version }}";
  const storageKey = `reviews_cache_${csvVersion}`;

  const maxReviews = {{ section.settings.max_reviews }};
  const showAll = {{ section.settings.show_all | json }};
  const slidesDesktop = {{ section.settings.slides_desktop }};
  const slidesMobile = {{ section.settings.slides_mobile }};
  const accessToken = '{{ section.settings.access_token }}';
  const shopDomain = '{{ section.settings.shop_domain }}';

  const preloader = document.querySelector('.preloader');
  const slider = document.querySelector('.review-slider');

  function fetchProductDetails(productId) {
    if (!productId || !productId.trim()) return Promise.resolve({ available: false });

    const gid = `gid://shopify/Product/${productId.trim()}`;

    return fetch(`https://${shopDomain}/api/2025-04/graphql.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': accessToken,
      },
      body: JSON.stringify({
        query: `
          query {
            product(id: "${gid}") {
              availableForSale
              title
              handle
              featuredImage {
                url
              }
            }
          }
        `
      })
    })
    .then(res => res.json())
    .then(data => {
      const p = data?.data?.product;
      return p ? {
        available: p.availableForSale,
        name: p.title || null,
        image: p.featuredImage?.url || null,
        url: p.handle ? `https://${shopDomain}/products/${p.handle}` : null
      } : { available: false };
    })
    .catch(() => ({ available: false }));
  }

  function renderReviews(data) {
    const filtered = data.filter(item => item.status === "Active");
    const reviewsToShow = showAll ? filtered : filtered.slice(0, maxReviews);

    slider.innerHTML = ''; // vide le slider avant de commencer

    const promises = reviewsToShow.map(async (review) => {
      const productDetails = await fetchProductDetails(review.productId);
      if (productDetails.available) {
        const slide = document.createElement("div");
        slide.className = "review-slide";
        slide.innerHTML = `
          <div class="review-card">
            <a href="${productDetails.url}" alt="Voir le produit" class="product-url"></a>
            ${productDetails.image ? `<img src="${productDetails.image}" alt="Product Image" class="review-product-image" />` : ''}
            <div class="review-rating">Note : ${review.rating}/5</div>
            <div class="review-text">"${review.review}"</div>
            <div class="review-author">> ${review.nickname}</div>
            <div class="review-product-name">${productDetails.name}</div>
            <div class="review-date">${new Date(review.date).toLocaleDateString()}</div>
          </div>
        `;
        slider.appendChild(slide);
      }
    });

    Promise.all(promises).then(() => {
      preloader.style.display = 'none';
      if (slider.children.length > 0) {
        $(slider).slick({
          slidesToShow: slidesDesktop,
          slidesToScroll: slidesDesktop,
          autoplay: true,
          autoplaySpeed: 5000,
          dots: false,
          arrows: true,
          prevArrow: $('.prev'),
          nextArrow: $('.next'),
          responsive: [
            {
              breakpoint: 768,
              settings: {
                slidesToShow: slidesMobile,
                slidesToScroll: slidesMobile,
              }
            }
          ]
        });
        $(slider).slick('setPosition'); // recalcul optionnel
      } else {
        preloader.innerHTML = 'Aucune revue disponible';
      }
    });
  }

  // Check if cached in sessionStorage
  const cached = sessionStorage.getItem(storageKey);
  if (cached) {
    renderReviews(JSON.parse(cached));
  } else {
    Papa.parse(csvUrl, {
      download: true,
      header: true,
      complete: function (results) {
        const data = results.data;
        sessionStorage.setItem(storageKey, JSON.stringify(data));
        renderReviews(data);
      }
    });
  }
});
</script>
